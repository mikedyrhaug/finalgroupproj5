---
title: "Review 1 - basics, decomp, box-cox, lag, acf, residuals"
author: "Me"
date: "`r Sys.Date()"
output: html_document
---

```{r message=FALSE}
library(fpp3)
```

## Time series basics

regular time series - has consistent time variable and doesn't have holes
interval - gap between each logged occurnace (should be consistant)

```{r}
data("gafa_stock")
data("PBS")
```

Show each series interval and see if its regular

```{r}
is_regular(gafa_stock)
interval(gafa_stock)

is_regular(PBS)
interval(PBS)
```

## Decomposition

output components - 
additive vs multiplicative - 
methods - 

```{r}
data("aus_production")
data("tourism")

series_1 <- aus_production %>%
  select(Quarter, Gas) %>%
  filter(Quarter >= yearquarter("1975 Q1"))

series_2 <- tourism %>%
  filter(Purpose == "Holiday") %>%
  group_by(State) %>%
  summarise(Trips = sum(Trips)) %>%
  filter(State == "Northern Territory")

autoplot(series_1)
autoplot(series_2)
```

### Additive

Apply additive decomposition to both series.  What's up with the leftovers after accounting for trend and seasonal components in each case?

```{r}
series_1 %>% 
  model(classical_decomposition(type = 'additive')) %>% 
  components() %>% 
  autoplot()

series_2 %>% 
  model(classical_decomposition(type = 'additive')) %>% 
  components() %>% 
  autoplot()
```

### Multiplicative

Apply multiplicative decomposition to both series.  What's up with the leftovers after accounting for trend and seasonal components in each case? Does multiplicative seem to be a better fit to either?

```{r}
series_1 %>% 
  model(classical_decomposition(type = 'multiplicative')) %>% 
  components() %>% 
  autoplot()

series_2 %>% 
  model(classical_decomposition(type = 'multiplicative')) %>% 
  components() %>% 
  autoplot()
```

### Fancy decomp models

Chuck STL and/or X11 at this for good measure:

```{r}

```

## Box-cox

What it does - tries different transformations
When it works - 
Lambda and what it does - 

```{r}
data("canadian_gas")
data("aus_production")

canadian_gas %>%
  autoplot()

gas <- aus_production %>%
  select(Quarter, Gas) %>%
  filter(Quarter >= yearquarter("1975 Q1"))

autoplot(gas)
```

Do box-cox stuff here to auto find best lambda:

```{r}
lambda <- gas %>% 
  features(Gas, features = guerrero) %>% 
  pull(lambda_guerrero)

gas %>% 
  autoplot(box_cox(Gas, lambda))
```

Playing with the lambda dial to view what it does:

```{r}
for (lambda in c(-5, -2, 0, 1, 2, 5)) {
  p <- gas %>%
    autoplot(box_cox(Gas, lambda)) +
    labs(title = paste("lambda:", lambda))

  print(p)
}

# the "do nothing" value of lambda is 1
all(gas$Gas == box_cox(gas$Gas, 1) + 1)

# the "do a log" value of lambda is 0
all(log(gas$Gas) == box_cox(gas$Gas, 0))
```

## Time series features

lag - 
ACF - 

```{r}
data("tourism")
data("aus_production")

tourism <- tourism %>%
  filter(Purpose == "Holiday") %>%
  group_by(State) %>%
  summarise(Trips = sum(Trips)) %>%
  filter(State == "Northern Territory")

gas <- aus_production %>%
  select(Quarter, Gas) %>%
  filter(Quarter >= yearquarter("1975 Q1"))
```

Create lag1 and lag4 variables for `gas` and show the first 8 rows

```{r}
interval(gas)
gas %>% 
  mutate(lag1 = lag(Gas, 1)) %>% 
  mutate(lag4 = lag(Gas, 4)) %>% 
  head(8)
```

Show a scatterplot with series vs various lags:

```{r}
gg_lag(gas, lags = c(1, 2, 4, 8), geom = "point")
```

Look at ACF plots for both tourism and gas:

```{r}
gas %>% 
  ACF() %>% 
  autoplot()
```

## Residuals

What we want to see - 
Test (name, note about dof, p < 0.05 means what?) - 

```{r}
data("aus_production")

gas <- aus_production %>%
  select(Quarter, Gas, Electricity) %>%
  filter(Quarter >= yearquarter("1975 Q1"))
```

* Fit a TSLM using just trend
* Visualize the model residuals
* Apply ljung_box test using
  * lag = 4
    * # (test first 4 bars in ACF plot; here, 4 quarters of lag)
    * # (rule-of-thumb, set to length of forecast horizon)
    * lag must be > dof
  * dof = 2
    * # (1 + number of coefficients in TSLM)
    * set to number of "estimated parameters"; here that's intercept and 1 coefficient
    * we use dof = 6 with ARIMA for pdq and PDQ

```{r}
fit <- gas %>% 
  model(TSLM(Gas ~ trend()))

gg_tsresiduals(fit)

augment(fit) %>% 
  features(.innov, ljung_box, lag = 4, dof = 2)
```

Copy paste and view the same thing for a model using just season.  Techincally we should adjust dof...

```{r}
fit <- gas %>% 
  model(TSLM(Gas ~ season()))

gg_tsresiduals(fit)

augment(fit) %>% 
  features(.innov, ljung_box, lag = 4, dof = 3 + 1)
```

ARIMA time

```{r}
fit <- gas %>% 
  model(ARIMA(Gas))

gg_tsresiduals(fit)

# If lag < dof then NA is returned
augment(fit) %>% 
  features(.innov, ljung_box, lag = 8, dof = 6)
```

